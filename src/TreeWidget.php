<?php
/**
 * Created by PhpStorm.
 * User: wodrow
 * Date: 18-11-23
 * Time: 下午6:41
 */

namespace wodrow\yii2wwtree;


use yii\db\ActiveRecord;
use yii\helpers\Url;
use yii\base\Widget;

class TreeWidget extends Widget
{
    public $treeModelClass;
    public $ajaxUrl;
    public $custom_field_view = '_form-node-custom';

    public $default_icon = "folder-open";
    public $default_icon_color = "#00ffff";
    public $default_sort = 0;

    /**
     * @var ActiveRecord|TreeBehavior $node
     */
    public $node;

    /**
     * @var ActiveRecord[] $list
     */
    private $list;

    /**
     * @var array $tree
     */
    private $tree;

    /**
     * @var FormSearch
     */
    public $formSearch;

    /**
     * @var FormTransNode
     */
    public $formTransNode;

    /**
     * @param ActiveRecord|TreeBehavior $node
     * @param null $arr
     * @return null
     */
    private static function makePnodes($node, &$arr = null)
    {
        $owner = $node;
        $primaryKey = $node->primaryKeyAttribute;
        $parantkey = $node->parentKeyAttribute;
        if (!$owner){
            return null;
        }
        if (!$owner->$parantkey){
            return null;
        }
        $p = $owner::find()->where([$primaryKey => $owner->$parantkey])->one();
        $arr[] =$p;
        self::makePnodes($p, $arr);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function run()
    {
        TreeAsset::register($this->view);
        $this->get();
        $this->search();
        $this->tree = TreeTools::list2tree($this->list, null, $this->node->primaryKeyAttribute, $this->node->parentKeyAttribute);
        TreeTools::get_tree_node_sort($this->tree);
        TreeTools::getPreStyle($this->tree);
        $this->delete();
        $this->addOrUpdate();
        $this->sortAction();
        $this->switch();
        return $this->render('index', [
            'tree' => $this->tree,
            'node' => $this->node,
            'trans_node_form' => $this->formTransNode,
            'node_search_form' => $this->formSearch,
            'custom_field_view' => $this->custom_field_view,
            'ajaxUrl' => $this->ajaxUrl,
        ]);
    }

    public function get()
    {
        $modelClass = $this->treeModelClass;
        /**
         * @var TreeBehavior|ActiveRecord $node
         */
        $node = new $modelClass();
        $primaryKey = $node->primaryKeyAttribute;
        $iconKey = $node->iconKeyAttribute;
        $iconColorKey = $node->iconColorKeyAttribute;
        $sortKey = $node->sortKeyAttribute;
        if (\Yii::$app->request->get('id')){
            $id = \Yii::$app->request->get('id');
            $node = $modelClass::findOne([$primaryKey => $id]);
        }else{
            $node->$iconKey = $this->default_icon;
            $node->$iconColorKey = $this->default_icon_color;
            $node->$sortKey = $this->default_sort;
        }
        $this->node = $node;
    }

    public function addOrUpdate()
    {
        $modelClass = $this->treeModelClass;
        $node = $this->node;
        $primaryKey = $node->primaryKeyAttribute;
        $parentKey = $node->parentKeyAttribute;
        $sortKey = $node->sortKeyAttribute;
        $old_pid = $node->$parentKey;
        if (\Yii::$app->request->get('add-for')) {
            $this->node->$parentKey = \Yii::$app->request->get('add-for');
        }
        if (\Yii::$app->request->isPost){
            if ($node->load(\Yii::$app->request->post())&&$node->validate()){
                $trans = $node->db->beginTransaction();
                try{
                    if (!$node->isNewRecord){
                        if ($old_pid != $node->$parentKey){
                            $models = $modelClass::find()->where([$parentKey => $old_pid])->andWhere(['>', $sortKey, $node->$sortKey])->orderBy([$sortKey => SORT_ASC])->all();
                            foreach ($models as $k => $v){
                                $v->$sortKey --;
                                $v->save();
                            }
                            $node->append();
                        }
                    }else{
                        $node->append();
                    }
                    $node->save();
                    $trans->commit();
                    \Yii::$app->session->addFlash("success", "保存成功");
                    $url = Url::to(['/'.\Yii::$app->controller->route, 'id' => $node->$primaryKey]);
                    \Yii::$app->response->redirect($url)->send();
                    exit;
                }catch (Exception $e){
                    $trans->rollBack();
                    \Yii::$app->session->addFlash("error", \wodrow\yii2wtools\tools\Model::getModelError($node));
                }
            }
        }
        $this->node = $node;
    }

    public function search()
    {
        $modelClass = $this->treeModelClass;
        $node = $this->node;
        $primaryKey = $node->primaryKeyAttribute;
        $nameKey = $node->nameKeyAttribute;
        $sortKey = $node->sortKeyAttribute;
        $node_search_form = new FormSearch();
        if ($node_search_form->load(\Yii::$app->request->get())&&$node_search_form->validate()){
            $key = $node_search_form->key;
            \Yii::$app->cache->delete($this->treeModelClass."_search_list_{$key}");
            $list = \Yii::$app->cache->get($this->treeModelClass."_search_list_{$key}");
            if (!$list){
                /**
                 * @var ActiveRecord[] $a
                 */
                $a = $modelClass::find()->orderBy([$sortKey => SORT_ASC])->where(['like', $nameKey, $key])->all();
                $ids = [];
                foreach ($a as $k => $v){
                    $ids[] = $v->$primaryKey;
                    $arr = [];
                    self::makePnodes($v, $arr);
                    foreach ($arr as $k1 => $v1){
                        if (!in_array($v1->$primaryKey, $ids)){
                            $ids[] = $v1->$primaryKey;
                            $a[] = $v1;
                        }
                    }
                }
                foreach ($a as $k => $v){
                    $a[$k]->$nameKey = str_replace($key, "<b>".$key."</b>", $a[$k]->$nameKey);
                    $a[$k] = $a[$k]->toArray();
                }
                $list = $a;
                \Yii::$app->cache->set($this->treeModelClass."_search_list_{$key}", $list, 3600);
            }
            $this->list = $list;
        }else{
            \Yii::$app->cache->delete($this->treeModelClass."_all_list");
            $list = \Yii::$app->cache->get($this->treeModelClass."_all_list");
            if (!$list){
                $list = $modelClass::find()->orderBy([$sortKey => SORT_ASC])->asArray()->all();
                \Yii::$app->cache->set($this->treeModelClass."_all_list", $list, 3600);
            }
            $this->list = $list;
        }
        $this->formSearch = $node_search_form;
    }

    public function switch()
    {
        $node = $this->node;
        $primaryKey = $node->primaryKeyAttribute;
        $parentKey = $node->parentKeyAttribute;
        $sortKey = $node->sortKeyAttribute;
        $trans_node_form = new FormTransNode();
        $trans_node_form->modelClass = $this->treeModelClass;
        $trans_node_form->slid = $node->$primaryKey;
        if ($trans_node_form->load(\Yii::$app->request->post())&&$trans_node_form->validate()){
            $trans_node_form->doTrans($primaryKey, $parentKey, $sortKey);
        }
        $this->formTransNode = $trans_node_form;
        $this->node = $node;
    }

    public function sortAction()
    {
        $modelClass = $this->treeModelClass;
        $primaryKey = $this->node->primaryKeyAttribute;
        if (\Yii::$app->request->get('id')){
            /**
             * @var ActiveRecord|TreeBehavior $node
             */
            $node = $modelClass::findOne([$primaryKey => \Yii::$app->request->get('id')]);
            switch (\Yii::$app->request->get('sort_action')){
                case "up":
                    $node->sortUp();
                    break;
                case "down":
                    $node->sortDown();
                    break;
                case "left":
                    $node->sortLeft();
                    break;
                case "right":
                    $node->sortRight();
                    break;
            }
        }
    }

    public function delete()
    {
        $modelClass = $this->treeModelClass;
        if (\Yii::$app->request->get('delete-for')){
            $node = $this->node;
            $primaryKey = $node->primaryKeyAttribute;
            $delete_id = \Yii::$app->request->get('delete-for');
            $this->node = $modelClass::findOne([$primaryKey => $delete_id]);
            if (!$this->node){
                $url = Url::to(['/'.\Yii::$app->controller->route]);
                \Yii::$app->response->redirect($url)->send();
                exit;
            }
            if (!$this->node->remove()){
                \Yii::$app->session->addFlash("error", \wodrow\yii2wtools\tools\Model::getModelError($this->node));
            }else{
                \Yii::$app->session->addFlash("success", "删除成功");
                $url = Url::to(['/'.\Yii::$app->controller->route]);
                \Yii::$app->response->redirect($url)->send();
                exit;
            }
        }
    }
}